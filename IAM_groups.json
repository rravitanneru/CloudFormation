{

"AWSTemplateFormatVersion" : "2010-09-09",

"Description" : "creating IAM Groups",

"Resources" : {

"Group1" : {

"Type" : "AWS::IAM::Group",

"Properties" : {

"GroupName" : "Consumer_Developer_ICS.NonProd",
      "Policies": [ {
      "PolicyName" : "Consumer_Developer_ICS.NonProdpolicy",
      "PolicyDocument" : {
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "sts:DecodeAuthorizationMessage",
                "sts:GetCallerIdentity"
            ],
            "Resource": "*"
        },
        {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": "sts:*",
            "Resource": "arn:aws:iam::xx-xxx-xxx-xxx:role/Consumer_Developer"
        }
]
}
 }]

}

},

"Group2" : {

"Type" : "AWS::IAM::Group",

"Properties" : {

"GroupName" : "Consumer_PowerUser_ICS.NonProd",
"Policies"  : [ {
     "PolicyName" : "Consumer_PowerUser_ICS.NonProdpolicy",
     "PolicyDocument" : {
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "sts:DecodeAuthorizationMessage",
                "sts:GetCallerIdentity"
            ],
            "Resource": "*"
        },
        {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": "sts:*",
            "Resource": "arn:aws:iam::--x---x--xxxx-:role/Consumer_PowerUser"
        }
    ]
}
}]


}

},

"IamRole" : {
  "Type": "AWS::IAM::Role",
  "Properties": {
    "RoleName": "Broker_BotArmy",
    "AssumeRolePolicyDocument": {
      "Version": "2012-10-17",
"Statement": [
{
"Effect": "Allow",
"Principal": {
 "AWS": "arn:aws:iam::xxxaccounvtnoxxx:root"
},
"Action": "sts:AssumeRole",
"Condition": {}
}
]
},
    "Policies": [ {
         "PolicyName" : "BotArmy-Write",
         "PolicyDocument" :  {
     "Version": "2012-10-17",
     "Statement": [
         {
             "Sid": "VisualEditor0",
             "Effect": "Allow",
             "Action": [
                 "iam:*",
                 "rds:*",
                 "s3:*",
                 "kms:*",
                 "ec2:*",
                 "cloudformation:*",
                 "elasticloadbalancing:*",
                 "autoscaling:*",
                 "sqs:*",
                 "secretsmanager:ListSecrets",
 				"support:*",
 				"cur:*",
 				"ce:*"

             ],
             "Resource": "*"
         }
     ]
 }
},
{
    "PolicyName" : "BotArmy-DenyNetworkLevelFunctions",
    "PolicyDocument" : {
   "Version": "2012-10-17",
   "Statement": [
       {
           "Sid": "VisualEditor0",
           "Effect": "Deny",
           "Action": [
               "ec2:CreateDhcpOptions",
               "route53domains:TransferDomain",
               "ec2:AuthorizeSecurityGroupIngress",
               "elasticloadbalancing:ModifyListener",
               "ec2:ReplaceRouteTableAssociation",
               "directconnect:CreateInterconnect",
               "ec2:DeleteVpcEndpoints",
               "route53domains:DisableDomainAutoRenew",
               "elasticloadbalancing:CreateLBCookieStickinessPolicy",
               "route53:CreateQueryLoggingConfig",
               "ec2:AttachInternetGateway",
               "ec2:DeleteRouteTable",
               "ec2:DeleteVpnGateway",
               "ec2:CreateRoute",
               "ec2:CreateInternetGateway",
               "ec2:RevokeSecurityGroupEgress",
               "ec2:DeleteInternetGateway",
               "ec2:UnassignPrivateIpAddresses",
               "route53:DeleteTrafficPolicyInstance",
               "route53:CreateTrafficPolicyVersion",
               "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
               "route53domains:DisableDomainTransferLock",
               "ec2:CreateTags",
               "route53domains:UpdateDomainNameservers",
               "ec2:ModifyNetworkInterfaceAttribute",
               "elasticloadbalancing:CreateTargetGroup",
               "ec2:AssignPrivateIpAddresses",
               "ec2:DisassociateRouteTable",
               "route53:CreateVPCAssociationAuthorization",
               "ec2:ReplaceNetworkAclAssociation",
               "ec2:CreateNetworkInterface",
               "ec2:RevokeSecurityGroupIngress",
               "ec2:DetachVpnGateway",
               "route53:DeleteReusableDelegationSet",
               "elasticloadbalancing:AddTags",
               "ec2:DeleteDhcpOptions",
               "ec2:DeleteNatGateway",
               "elasticloadbalancing:DeleteLoadBalancerListeners",
               "directconnect:DeleteConnection",
               "ec2:CreateSubnet",
               "elasticloadbalancing:ModifyLoadBalancerAttributes",
               "ec2:ModifyVpcEndpoint",
               "ec2:DeleteNetworkAclEntry",
               "ec2:CreateVpnConnection",
               "ec2:DisassociateAddress",
               "ec2:MoveAddressToVpc",
               "route53:CreateTrafficPolicy",
               "ec2:CreateNatGateway",
               "ec2:CreateVpc",
               "elasticloadbalancing:SetRulePriorities",
               "route53:DeleteHealthCheck",
               "ec2:ModifySubnetAttribute",
               "directconnect:DeleteVirtualInterface",
               "route53domains:RetrieveDomainAuthCode",
               "elasticloadbalancing:CreateAppCookieStickinessPolicy",
               "route53:DeleteHostedZone",
               "elasticloadbalancing:CreateLoadBalancerPolicy",
               "ec2:DeleteNetworkAcl",
               "ec2:ReleaseAddress",
               "ec2:AssociateDhcpOptions",
               "elasticloadbalancing:CreateLoadBalancer",
               "ec2:AttachVpnGateway",
               "route53domains:ResendContactReachabilityEmail",
               "ec2:CreateVpnConnectionRoute",
               "elasticloadbalancing:SetSubnets",
               "route53:CreateTrafficPolicyInstance",
               "elasticloadbalancing:DeleteTargetGroup",
               "directconnect:AllocatePrivateVirtualInterface",
               "directconnect:DeleteInterconnect",
               "ec2:RestoreAddressToClassic",
               "ec2:DeleteCustomerGateway",
               "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
               "ec2:EnableVgwRoutePropagation",
               "elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer",
               "ec2:DisableVpcClassicLink",
               "route53:AssociateVPCWithHostedZone",
               "elasticloadbalancing:DeleteListener",
               "ec2:DeleteFlowLogs",
               "ec2:DeleteSubnet",
               "elasticloadbalancing:DetachLoadBalancerFromSubnets",
               "directconnect:CreatePublicVirtualInterface",
               "ec2:DetachClassicLinkVpc",
               "route53domains:RenewDomain",
               "ec2:DeleteVpcPeeringConnection",
               "ec2:AcceptVpcPeeringConnection",
               "elasticloadbalancing:RegisterTargets",
               "route53domains:EnableDomainAutoRenew",
               "ec2:DisableVgwRoutePropagation",
               "elasticloadbalancing:SetIpAddressType",
               "ec2:ReplaceRoute",
               "ec2:AssociateRouteTable",
               "ec2:RejectVpcPeeringConnection",
               "elasticloadbalancing:DeleteLoadBalancer",
               "elasticloadbalancing:DeleteLoadBalancerPolicy",
               "ec2:CreatePlacementGroup",
               "route53:CreateHealthCheck",
               "ec2:ReplaceNetworkAclEntry",
               "ec2:CreateVpnGateway",
               "elasticloadbalancing:CreateRule",
               "route53:UpdateHostedZoneComment",
               "directconnect:AllocatePublicVirtualInterface",
               "ec2:DeleteVpnConnection",
               "ec2:CreateVpcPeeringConnection",
               "elasticloadbalancing:ModifyTargetGroupAttributes",
               "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
               "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
               "ec2:EnableVpcClassicLink",
               "elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer",
               "route53:UpdateTrafficPolicyComment",
               "route53:UpdateTrafficPolicyInstance",
               "route53:CreateHostedZone",
               "route53domains:UpdateTagsForDomain",
               "route53:DisassociateVPCFromHostedZone",
               "ec2:ResetNetworkInterfaceAttribute",
               "ec2:CreateRouteTable",
               "ec2:DeleteNetworkInterface",
               "route53:ChangeResourceRecordSets",
               "elasticloadbalancing:DeregisterTargets",
               "ec2:DetachInternetGateway",
               "ec2:CreateCustomerGateway",
               "directconnect:AllocateConnectionOnInterconnect",
               "route53:DeleteVPCAssociationAuthorization",
               "ec2:CreateFlowLogs",
               "elasticloadbalancing:ModifyRule",
               "route53domains:RegisterDomain",
               "route53:ChangeTagsForResource",
               "ec2:DeleteVpc",
               "route53domains:UpdateDomainContactPrivacy",
               "ec2:AssociateAddress",
               "directconnect:CreateConnection",
               "directconnect:CreatePrivateVirtualInterface",
               "route53:DeleteTrafficPolicy",
               "elasticloadbalancing:ConfigureHealthCheck",
               "route53domains:DeleteTagsForDomain",
               "route53:UpdateHealthCheck",
               "elasticloadbalancing:SetLoadBalancerListenerSSLCertificate",
               "elasticloadbalancing:RemoveTags",
               "elasticloadbalancing:CreateListener",
               "ec2:CreateSecurityGroup",
               "ec2:CreateNetworkAcl",
               "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
               "ec2:ModifyVpcAttribute",
               "elasticloadbalancing:DeleteRule",
               "ec2:AuthorizeSecurityGroupEgress",
               "ec2:AttachClassicLinkVpc",
               "ec2:DetachNetworkInterface",
               "ec2:DeletePlacementGroup",
               "elasticloadbalancing:AttachLoadBalancerToSubnets",
               "route53:CreateReusableDelegationSet",
               "ec2:DeleteRoute",
               "route53domains:EnableDomainTransferLock",
               "ec2:AllocateAddress",
               "elasticloadbalancing:CreateLoadBalancerListeners",
               "ec2:DeleteVpnConnectionRoute",
               "ec2:CreateVpcEndpoint",
               "ec2:DeleteSecurityGroup",
               "elasticloadbalancing:SetSecurityGroups",
               "ec2:AttachNetworkInterface",
               "ec2:CreateNetworkAclEntry",
               "route53:DeleteQueryLoggingConfig",
               "route53domains:UpdateDomainContact",
               "elasticloadbalancing:ModifyTargetGroup"
           ],
           "Resource": "*"
       }
   ]
}
}

     ]

  }
}

}

}
